--[[
Author: TheOriginalBIT
Version: 1.0.1
Created: 03 Jan 2013
Last Update: 11 Jan 2013

License:

COPYRIGHT NOTICE
Copyright Â© 2013 Joshua Asbury a.k.a TheOriginalBIT [theoriginalbit@gmail.com]

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

-The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-Visible credit is given to the original author.
-The software is distributed in a non-profit way.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]--

local sizeX, sizeY = term.getSize()

local logo = nil
local overlay = nil
local width = nil
local logoIsLoad = false
local hasOverlay = false
local loadColor = nil
local yPos = nil
local message = nil
local header = nil
local footer = nil
local currEventCount = 0
local totalEventCount = nil

function initLogoLoad( tLogo, count, loadCol, openingMsg, headMsg, footMsg )
	logo = type( tLogo ) == "table" and tLogo or {}
	width = tLogo[1] ~= nil and #tLogo[1] or 20
	logoIsLoad = true
	loadColor = loadCol
	yPos = math.ceil( sizeY / 2 - #logo / 2 )
	message = openingMsg
	header = headMsg
	footer = footMsg
	totalEventCount = count
end

function initLogoAsOverlayLoad( tLogo, count, openingMsg, headMsg, footMsg )
	initLogoLoad( tLogo, count, colors.white, openingMsg, headMsg, footMsg )
	hasOverlay = true
end

function initBarLoad( tLogo, count, barWidth, y, loadCol, openingMsg, headMsg, footMsg )
	logo = type( tLogo ) == "table" and tLogo or {}
	width = barWidth and barWidth or 20
	logoIsLoad = false
	loadColor = loadCol
	yPos = y
	message = openingMsg
	header = headMsg
	footer = footMsg
	totalEventCount = count
end

function triggerUpdate( msg )
	currEventCount = currEventCount + 1
	if msg and msg:len() ~= 0 then message = msg end
	os.queueEvent( "load_update" )
end

function forceStop()
	currEventCount = totalEventCount
	os.queueEvent( "load_update" )
end

function setMessage( msg )
	message = msg
	os.queueEvent( "load_update" )
end

local function hexLookup( char )
	local value = tonumber(char, 16)
	return ( value and math.pow(2, value) or false )
end

local function clearScreen( color )
	term.setCursorPos(1,1)
	term.setBackgroundColor( color or colors.blue )
	term.clear()
end

local function drawScreen()
	term.setBackgroundColor( colors.white )
	term.setTextColor( colors.black )
	term.setCursorPos( math.ceil( sizeX / 2 ) - math.ceil( string.len( header ) / 2 ), 1 )
	write( header )
	term.setCursorPos( math.ceil( sizeX / 2 ) - math.ceil( string.len( footer ) / 2 ), sizeY )
	write( footer )
	
	for row = 1, #logo do
		for col = 1, logo[row]:len() do
			term.setCursorPos( math.ceil( sizeX / 2 - #logo[1] / 2 ) + col, logoIsLoad and yPos + row or (math.ceil( sizeY / 2 - #logo / 2 ) + row) - 2  )
			local char = logo[row]:sub( col, col )
			if char ~= " " then
				if not logoIsLoad or col > ( ( currEventCount / totalEventCount ) * logo[1]:len() + ( currEventCount == 0 and currEventCount or 1 ) ) then
					if not hasOverlay then
						term.setBackgroundColor( hexLookup( char ) )
					else
						term.setBackgroundColor( colors.lightGray )
					end
				else
					if not hasOverlay then
						term.setBackgroundColor( loadColor )
					else
						term.setBackgroundColor( hexLookup( char ) )
					end
				end
				write(" ")
			end
		end
		print()
	end
	
	if not logoIsLoad then
		for i = 1, width do
			term.setCursorPos( (sizeX - width) / 2 + i, yPos)
			
			if i < (( currEventCount / totalEventCount ) * width + 1) then
				term.setBackgroundColor( loadColor )
			else
				term.setBackgroundColor( colors.gray )
			end
			
			write(" ")
		end
	end
	
	if message then
		print()
		term.setCursorPos( sizeX / 2 - message:len() / 2, sizeY - 3 )
		term.setBackgroundColor( colors.white )
		term.setTextColor( colors.black )
		term.clearLine()
		term.write( message )
	end
end

function run()
	clearScreen( colors.white )
	
	drawScreen()

	while true do
		if currEventCount == totalEventCount then return true end
		
		event = { os.pullEventRaw( "load_update" ) }
		
		drawScreen()
	end
end